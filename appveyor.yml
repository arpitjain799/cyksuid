environment:
  PYPI_USERNAME:
    secure: WmAbQg/GQXggsqUZLDFO/Q==
  PYPI_PASSWORD:
    secure: Wwb9J4Z4yrV0c3UpCePa6w==
  DISTRIBUTIONS: bdist_wheel
  matrix:
    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    - PYTHON: "C:\\Python27"
    - PYTHON: "C:\\Python27-x64"
    - PYTHON: "C:\\Python35"
    - PYTHON: "C:\\Python35-x64"
    - PYTHON: "C:\\Python36"
    - PYTHON: "C:\\Python36-x64"
    - PYTHON: "C:\\Python37"
    - PYTHON: "C:\\Python37-x64"
    - PYTHON: "C:\\Python38"
    - PYTHON: "C:\\Python38-x64"
      # For Python 3.8, we need a different image, check out available pre-installed Python
      # and Visual Studio versions: https://www.appveyor.com/docs/linux-images-software/
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    - PYTHON: "C:\\Python39"
      DISTRIBUTIONS: "bdist_wheel"
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    - PYTHON: "C:\\Python39-x64"
      DISTRIBUTIONS: "bdist_wheel"
      # For Python 3.9, we need a different image, check out available pre-installed Python
      # and Visual Studio versions: https://www.appveyor.com/docs/linux-images-software/
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019

install:
  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install wheel"
  - "%PYTHON%\\python.exe -m pip install cython"
  - "%PYTHON%\\python.exe -m pip install pytest"
  - '%PYTHON%\\python.exe -m pip install -e . --install-option="--with-cython"'

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "%PYTHON%\\python.exe -m pytest tests/"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - "%PYTHON%\\python.exe setup.py %DISTRIBUTIONS%"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*
    name: wheels

deploy_script:
  # populate pypirc file for twine
  - echo [distutils]                                  > %USERPROFILE%\\.pypirc
  - echo index-servers =                             >> %USERPROFILE%\\.pypirc
  - echo     pypi                                    >> %USERPROFILE%\\.pypirc
  - echo [pypi]                                      >> %USERPROFILE%\\.pypirc
  - echo username=%PYPI_USERNAME%                    >> %USERPROFILE%\\.pypirc
  - echo password=%PYPI_PASSWORD%                    >> %USERPROFILE%\\.pypirc
  # upload to pypi for windows
  - set HOME=%USERPROFILE%
  - ps: ls dist
  - ps: >-
      if ( ($env:APPVEYOR_REPO_BRANCH -eq 'master') -and ($env:APPVEYOR_REPO_TAG -eq 'true') -and
      ($env:APPVEYOR_REPO_TAG_NAME -match '^v[0-9]+\.[0-9]+\.[0-9]+') ) {
        Write-Output ("Deploying tag: " + $env:APPVEYOR_REPO_TAG_NAME + " to PyPI ...")
        Invoke-Expression "%PYTHON%/python.exe -m pip install readme-renderer==24.0 Pygments==2.3.1 twine==1.15.0"
        Invoke-Expression "twine upload --skip-existing --non-interactive --verbose dist/*.whl"
      } else {
        Write-Output ("Skipped deployment to PyPI as this is not a tagged commit.")
      }
